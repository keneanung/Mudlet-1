name: Build Mudlet
on:
  - pull_request
  - push

jobs:
  compile-mudlet:
    name: ${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          # - os: windows-latest
          #   triplet: x64-windows
          - os: ubuntu-latest
            triplet: x64-linux
          - os: macos-latest
            triplet: x64-osx
    env:
      qt: "5.14.1"

    steps:
    - name: Restore Qt cache
      uses: actions/cache@v1
      id: cache-qt
      with:
        path: ${{runner.workspace}}/Qt/${{env.qt}}
        key: ${{runner.os}}-qt-${{env.qt}}
        restore-keys: |
          ${{runner.os}}-qt-

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      if: steps.cache-qt.outputs.cache-hit != 'true'
      with:
        version: ${{env.qt}}
        dir: ${{runner.workspace}}
        arch: win64_mingw73 # this key is relevant only for windows
        cached: ${{steps.cache-qt.outputs.cache-hit}}

    - name: Checkout Mudlet source code
      uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0

    - name: "Set location of vcpkg dependencies"
      env:
        vcpkgResponseFile: ${{github.workspace}}/3rdparty/our-vcpkg-dependencies/vcpkg-${{matrix.triplet}}-dependencies
      run: |
        echo "::set-env name=vcpkgResponseFile::$vcpkgResponseFile"
      shell: bash

    - name: (macOS) Install homebrew dependencies
      if: runner.os == 'macOS'
      run: |
        # these aren't available or don't work well in vcpkg
        brew install pkg-config libzzip libzip

    - name: (Linux) Install apt dependencies
      if: runner.os == 'Linux'
      run: |
        # these aren't available or don't work well in vcpkg
        sudo apt install pkg-config libzip-dev libglu1-mesa-dev libpulse-dev

    # Restore from cache the previously built ports. If "cache miss", then provision vcpkg, install desired ports, finally cache everything for the next run.
    - name: Restore from cache and run vcpkg
      uses: lukka/run-vcpkg@v2
      with:
        vcpkgArguments: '@${{env.vcpkgResponseFile}}'
        vcpkgDirectory: '${{github.workspace}}/3rdparty/vcpkg'
        appendedCacheKey: ${{hashFiles(env.vcpkgResponseFile)}}

    - run: find /home/runner/work/Mudlet/Mudlet/3rdparty/vcpkg/installed/

    - run: find /usr/lib/x86_64-linux-gnu/

    - name: Build Mudlet
      uses: lukka/run-cmake@v2
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{github.workspace}}/CMakeLists.txt'
        useVcpkgToolchainFile: true
        buildDirectory: '${{runner.workspace}}/b/ninja'
        # -DLUA_LIBRARY is for https://github.com/awesomeWM/awesome/issues/1664#issuecomment-287648288
        # This path should match the output of 'Found Lua51:' exactly
        cmakeAppendedArgs: --debug-output --trace --trace-expand -DCMAKE_PREFIX_PATH=${{runner.workspace}}/Qt/${{env.qt}}/clang_64/
